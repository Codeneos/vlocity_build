<project name="VlocityAnt" default="test" basedir="." xmlns:sf="antlib:com.salesforce">

	<taskdef resource="net/sf/antcontrib/antlib.xml" classpath="${basedir}/bin/ant-contrib-1.0b3.jar" />

	<taskdef resource="com/salesforce/antlib.xml" uri="antlib:com.salesforce">
        <classpath>
            <pathelement location="${basedir}/bin/ant-salesforce.jar" />        	
        </classpath>
    </taskdef>

	<property environment="env"/>

	<!-- If no propertyfile was passed in command line, attempt to load a build.properties if it exists -->
	<if>
		<not><isset property="sf.username" /></not>
		<then>
			<trycatch property="buildprop" reference="propbuild">
				<try>
					<loadproperties srcFile="${basedir}/build.properties"/>
				</try>
				<catch>
					<echo>No propertyfile selected. Please create a "build.properties" file following the template provided in template.build.properties. Or specify a -propertyfile.</echo>
				</catch>
			</trycatch>
		</then>
	</if>

    <script language="javascript"> <![CDATA[
  		var commandLine = java.lang.System.getProperty("sun.java.command");
	  	var parts = commandLine.split(' ');
	  	var property = null;
	  	for (var i = 0; i < parts.length; i++) {
			if (parts[i] === '-propertyfile') {
				//	next part is our buildfile for grunt
				property = VlocityAnt.createTask("property");
				property.setName('grunt.propertyfile');
				property.setValue(parts[i+1]);
		      	property.perform();
		      	break;
			}
	  	}
		if (!property) {
			property = VlocityAnt.createTask("property");
			property.setName('grunt.propertyfile');
			property.setValue('build.properties');
	      	property.perform();
		}
    ]]></script>

	<echo> Developer Org - ${sf.username} </echo>
	<if>
		<isset property="sf.description" />
		<then>
			<echo> Description - ${sf.description}</echo>
		</then>
	</if>

	<var name="loginUrl" unset="true" />
	<if>
		<not><isset property="sf.loginUrl" /></not>
		<then>
			<property name="loginUrl" value="https://login.salesforce.com" />
			<property name="sf.loginUrl" value="https://login.salesforce.com" />
		</then>
		<else>
			<property name="loginUrl" value="${sf.loginUrl}" />
		</else>
	</if>

	<var name="grunt.prop" unset="true" />
	<if>
		<not><isset property="grunt.propertyfile" /></not>
		<then>
			<property name="grunt.prop" value="build.properties" />
		</then>
		<else>
			<property name="grunt.prop" value="${grunt.propertyfile}" />
		</else>
	</if>

	<var name="maxPoll" unset="true" />
	<if>
		<isset property="sf.maxPoll" />
		<then>
			<property name="maxPoll" value="${sf.maxPoll}" />
		</then>
		<else>
			<property name="maxPoll" value="5000" />
			<property name="sf.maxPoll" value="5000" />
		</else>
	</if>

    <target name="salesforceDeploy">
    	<echo> ${sf.username} - ${basedir}/${sf.sourcedir}</echo>
    	<fixMetadataFiles dir="${basedir}/${sf.sourcedir}" />
	   	<sf:deploy username="${sf.username}" password="${sf.password}" serverurl="${loginUrl}" maxPoll="${maxPoll}" deployRoot="${basedir}/${sf.sourcedir}" pollWaitMillis="1000" />
  	</target>

  	<target name="salesforceDeployTest">
  		<echo> ${sf.username} - ${basedir}/${sf.sourcedir}</echo>
        <fixMetadataFiles dir="${basedir}/${sf.sourcedir}" />
	   	<sf:deploy username="${sf.username}" password="${sf.password}" serverurl="${loginUrl}" maxPoll="${maxPoll}" deployRoot="${basedir}/${sf.sourcedir}" pollWaitMillis="1000" checkOnly="true" />
  	</target>

  	<target name="salesforceRetrieve">
  		<echo> ${sf.username} - ${basedir}/${sf.sourcedir}</echo>
		<sf:retrieve username="${sf.username}" password="${sf.password}" serverurl="${sf.loginUrl}" maxPoll="${sf.maxPoll}" retrieveTarget="${basedir}/${sf.sourcedir}" unpackaged="${basedir}/${sf.sourcedir}/package.xml" />
    </target>

    <target name="salesforceRetrieveAll">
        <echo> ${sf.username} - ${basedir}/${sf.sourcedir}</echo>
        <sf:retrieve username="${sf.username}" password="${sf.password}" serverurl="${sf.loginUrl}" maxPoll="${sf.maxPoll}" retrieveTarget="./vlocity-temp/allMetadata" unpackaged="./bin/all_meta_data.xml" />
    </target>


    <target name="salesforceRetrievePackage">
        <sf:retrieve username="${sf.username}" password="${sf.password}" serverurl="${loginUrl}" maxPoll="${maxPoll}" retrieveTarget="${basedir}/${sf.sourcedir}" packageNames="${packageNames}"/>
    </target>

    <macrodef name="fixMetadataFiles" description="">
        <attribute name="dir" description="The path of files"/>
        <sequential>
            <for param="file">
                <path>
                    <fileset dir="@{dir}" includes="**/*-meta.xml"/>
                </path>
                <sequential>
                    <replaceregexp file="@{file}" match="/*.minorNumber.*" replace="" flags="g"/>
                    <replaceregexp file="@{file}" match="/*.majorNumber.*" replace="" flags="g"/>
                    <replaceregexp file="@{file}" match="/*.\/packageVersions.*" replace="" flags="g"/>
                    <replaceregexp file="@{file}" match="/*.packageVersions.*" replace="" flags="g"/>
                    <replaceregexp file="@{file}" match="/*.namespace.*" replace="" flags="g"/>
                    <replaceregexp file="@{file}" match="(\r?\n)\s*\r?\n" flags="g" replace="\1"/>
                </sequential>
            </for>
        </sequential>
    </macrodef>

	<target name="packExport" description="">
		<runDataPackJob packCommand="packExport" job="${vlocity.dataPackJob}" />
	</target>

	<target name="packDeploy" description="">
		<runDataPackJob packCommand="packDeploy" job="${vlocity.dataPackJob}" />
	</target>

    <target name="runTestJob" description="">
        <runDataPackJob packCommand="runTestJob" job="TestJob" />
    </target>

	<macrodef name="runDataPackJob" >
		<attribute name="packCommand" />
		<attribute name="job" />
		<sequential>
			<trycatch property="deployFailureProperty">
				<try>
					<echo> ------------------------------------------- </echo>
					<echo> ------------------------------------------- </echo>
					<echo> Running - @{packCommand} - @{job} - ${grunt.prop}</echo>
                        <exec executable="npm" dir="${basedir}">
                            <arg value="install" />
                        </exec>
						<exec executable="node" dir="${basedir}">
                            <arg value="./node_modules/grunt-cli/bin/grunt" />
							<arg value="@{packCommand}"/>
							<arg value="-job"/>
							<arg value="@{job}"/>
							<arg value="-propertyfile"/>
							<arg value="${grunt.prop}"/>
						</exec>
					<echo>Finished</echo>
				</try>
			</trycatch>
		</sequential>
	</macrodef>
</project>
